@page "/installationauthentication"
@rendermode InteractiveServer

@using Mihcelle.Hwavmvid.Shared.Models
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using System.Collections.Generic
@using Mihcelle.Hwavmvid.Providers

@inject NavigationManager navigationmanager
@inject IHttpClientFactory ihttpclientfactory
@inject Data.Applicationdbcontext applicationdbcontext
@inject Applicationprovider applicationprovider
@inject Applicationbackendprovider applicationbackendprovider

<div class="container p-2 p-sm-5">

    <div class="row align-items-center">
        <div class="col-md-6 offset-md-3">
            <img src="@(string.Concat(navigationmanager.BaseUri, "hwavmvidtechnologies.png"))" />
        </div>
    </div>

    <div class="row">

        <div class="col-md-6 offset-md-3">

            <div class="p-2 p-sm-4 mb-2 bg-dark text-white">

                <strong>after installation application restart is required</strong><br />
                <small style="font-size: 0.8rem;">
                    delete your site cookies if you run in trouble<br />
                    open nuget package manager console for manual installation<br />
                    run: add-migration [name]<br />
                    run: update-database<br />
                </small>
            </div>
            
            @if (this.tenant != null)
            {
                <div class="input-group mb-3">
                    <span class="input-group-text" id="tenant">Database connection</span>
                    <input type="text" class="form-control" placeholder="@this.tenant.Databaseconnectionstring" aria-label="Tenant" aria-describedby="tenant">
                </div>
            }

            <div class="input-group mb-3">
                <span class="input-group-text" id="administratorusername">Administrator username</span>
                <input type="text" class="form-control bg-dark text-light" placeholder="@this.installationmodel.Hostusername" aria-label="Administrator username" aria-describedby="administratorusername" disabled>
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text">Administrator password</span>
                <input type="@this.administratorpasswordinputfieldtype" class="form-control" @bind-value="this.installationmodel.Hostpassword" aria-label="Administrator password">
                <button type="button" class="btn btn-sm btn-primary" style="min-width: 88px;" @onclick="() => Toggleadministratorpassword()">
                    👁
                </button>
            </div>

            <button type="button" @onclick="async () => await this.Install()" class="btn btn-sm btn-primary">Install application</button>

        </div>

    </div>

</div>

@code {


    protected Installationmodel installationmodel { get; set; } = new Installationmodel();
    public Applicationtenant? tenant { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            this.tenant = await this.applicationdbcontext.Applicationtenants.Where(item => item.Siteid == this.applicationbackendprovider._contextsite.Id).FirstOrDefaultAsync();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }

        await base.OnInitializedAsync();
    }

    protected string databaseownerinputfieldtype { get; set; } = "password";
    protected void Toggledatabaseownderpassword()
    {
        this.databaseownerinputfieldtype = this.databaseownerinputfieldtype == "text" ? "password" : this.databaseownerinputfieldtype == "password" ? "text" : "password";
        this.StateHasChanged();
    }

    protected string administratorpasswordinputfieldtype { get; set; } = "password";
    protected void Toggleadministratorpassword()
    {
        this.administratorpasswordinputfieldtype = this.administratorpasswordinputfieldtype == "text" ? "password" : this.administratorpasswordinputfieldtype == "password" ? "text" : "password";
        this.StateHasChanged();
    }

    protected async Task Install()
    {

        try
        {

            var client = this.ihttpclientfactory.CreateClient();
            client.BaseAddress = new Uri(this.navigationmanager.BaseUri);
            await client.PostAsJsonAsync("api/installationauthentication", this.installationmodel);
            this.navigationmanager.NavigateTo(this.navigationmanager.BaseUri, true);
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
        
    }

}
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using System.Collections.Generic
@using Mihcelle.Hwavmvid.Shared.Constants
@using Mihcelle.Hwavmvid.Shared.Models
@using Mihcelle.Hwavmvid.Providers

@inject Data.Applicationdbcontext applicationdbcontext
@inject Installationprovider installationprovider
@inject Applicationprovider applicationprovider
@inject Cookies.Cookiesprovider cookiesprovider
@inject Modal.Modalservice modalservice
@inject Applicationbackendprovider applicationbackendprovider

@inject IConfiguration configuration
@inject IHttpClientFactory ihttpclientfactory
@inject NavigationManager navigationmanager


@if (this.applicationbackendprovider?._contextcontainer != null && this.applicationbackendprovider?._contextcontainercolumns != null && this.applicationbackendprovider._contextcontainercolumns.Any())
{

    <div class="@this.applicationbackendprovider?._contextcontainer.Containertype g-0" style="border: 2px dotted black">

        <AuthorizeView Roles="Host">
            <Authorized>

                <div class="position-relative bg-secondary border-2 border-dark d-flex justify-content-end align-items-center w-100 h-100" style="min-height: 62px; padding: 5px;">

                    <button @onclick="async() => await this.Setcontainertype()" type="button" class="btn btn-sm btn-secondary px-2 py-2 rounded-0">
                        <small class="py-2">Update container width</small>
                    </button>

                </div>

            </Authorized>
        </AuthorizeView>

        <div class="row g-0 align-items-center">

            @foreach (var column in this.applicationbackendprovider._contextcontainercolumns)
            {

                <div class="position-relative @column.Columnwidth" style="width: 100%; min-height: 140px; border: 1px solid dashed;">

                    @foreach (var module in column.Modules)
                    {

                        Type? componenttype = Type.GetType(module.Assemblytype);
                        Type? modulesettingscomponenttype = Type.GetType(module.Settingstype);

                        if (componenttype != null && modulesettingscomponenttype != null)
                        {
                            <Mihcelle.Hwavmvid.Modules.Modulebasecomponent Moduleid="@module.Id" Componenttype="@componenttype" Containertype="@this.applicationbackendprovider._contextcontainer.Containertype" Componentsettingstype="@modulesettingscomponenttype"></Mihcelle.Hwavmvid.Modules.Modulebasecomponent>
                        }

                    }

                    <div id="@column.Id" class="packagedropzone packagedropzone-@(column?.Id?.ToString())" />

                </div>

            }

        </div>

    </div>

}

@code {

    protected override async Task OnInitializedAsync()
    {

        this.applicationbackendprovider._contextcontainer = await this.applicationdbcontext.Applicationcontainers.FirstOrDefaultAsync(item => item.Pageid == this.applicationbackendprovider._contextpage.Id);
        var columns = await this.applicationdbcontext.Applicationcontainercolumns.Where(item => item.Containerid == this.applicationbackendprovider._contextcontainer.Id).ToListAsync();
        if (columns != null && columns.Any())
        {
            var orderedcolumns = columns.OrderBy(item => item.Gridposition).ToList();
            foreach (var column in orderedcolumns)
            {
                column.Modules.Clear();
                var modules = await this.applicationdbcontext.Applicationmodules.Where(item => item.Containercolumnid == column.Id).ToListAsync();
                foreach (var module in modules)
                {
                    column.Modules.Add(module);
                }

                column.Modules = column.Modules.OrderBy(item => item.Createdon).ToList();
            }

            this.applicationbackendprovider._contextcontainercolumns = orderedcolumns;
            this.StateHasChanged();
        }

        await base.OnInitializedAsync();
    }

    protected async Task Setcontainertype()
    {

        string targetcontainertype = string.Empty;

        if (this.applicationbackendprovider._contextcontainer?.Containertype == Applicationcontainertype.Boxed.ToString())
            targetcontainertype = "container-fluid";

        if (this.applicationbackendprovider._contextcontainer?.Containertype == Applicationcontainertype.Fullwidth.ToString())
            targetcontainertype = "container";


        var client = this.ihttpclientfactory.CreateClient();
        client.BaseAddress = new Uri(this.navigationmanager.BaseUri);
        await client.GetAsync(string.Concat("api/container/", this.applicationbackendprovider._contextcontainer?.Id, "/", targetcontainertype));
        this.navigationmanager.NavigateTo(this.navigationmanager.Uri, true);
    }
}